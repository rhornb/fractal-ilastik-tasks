{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Ilastik Pixel Classification Segmentation",
      "category": "Segmentation",
      "tags": [
        "Pixel Classifier"
      ],
      "docs_info": "### Purpose\n\nThis task is used to apply a ilastik pixel classifier to an image.\n\n### Outputs\n\n- The `ilastik_pixel_classification_segmentation`: Generates a new label image named `output_label_name`.\n\n### Limitations\n\n- The task can only be used with single and dual channels pixel classifiers models.",
      "executable_parallel": "ilastik_pixel_classification_segmentation.py",
      "meta_parallel": {
        "cpus_per_task": 8,
        "mem": 8000
      },
      "args_schema_parallel": {
        "$defs": {
          "CellposeChannel1InputModel": {
            "description": "Channel input for cellpose with normalization options.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`. Can only be specified if label is not set."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel. Can only be specified if wavelength_id is not set."
              },
              "normalize": {
                "$ref": "#/$defs/CellposeCustomNormalizer",
                "title": "Normalize",
                "description": "Validator to handle different normalization scenarios for Cellpose models"
              }
            },
            "title": "CellposeChannel1InputModel",
            "type": "object"
          },
          "CellposeChannel2InputModel": {
            "description": "Channel input for secondary cellpose channel with normalization options.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`. Can only be specified if label is not set."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel. Can only be specified if wavelength_id is not set."
              },
              "normalize": {
                "$ref": "#/$defs/CellposeCustomNormalizer",
                "title": "Normalize",
                "description": "Validator to handle different normalization scenarios for Cellpose models"
              }
            },
            "title": "CellposeChannel2InputModel",
            "type": "object"
          },
          "CellposeCustomNormalizer": {
            "description": "Validator to handle different normalization scenarios for Cellpose models",
            "properties": {
              "type": {
                "default": "default",
                "enum": [
                  "default",
                  "custom",
                  "no_normalization"
                ],
                "title": "Type",
                "type": "string",
                "description": "One of `default` (Cellpose default normalization), `custom` (using the other custom parameters) or `no_normalization`."
              },
              "lower_percentile": {
                "maximum": 100.0,
                "minimum": 0.0,
                "title": "Lower Percentile",
                "type": "number",
                "description": "Specify a custom lower-bound percentile for rescaling as a float value between 0 and 100. Set to 1 to run the same as default). You can only specify percentiles or bounds, not both."
              },
              "upper_percentile": {
                "maximum": 100.0,
                "minimum": 0.0,
                "title": "Upper Percentile",
                "type": "number",
                "description": "Specify a custom upper-bound percentile for rescaling as a float value between 0 and 100. Set to 99 to run the same as default, set to e.g. 99.99 if the default rescaling was too harsh. You can only specify percentiles or bounds, not both."
              },
              "lower_bound": {
                "title": "Lower Bound",
                "type": "integer",
                "description": "Explicit lower bound value to rescale the image at. Needs to be an integer, e.g. 100. You can only specify percentiles or bounds, not both."
              },
              "upper_bound": {
                "title": "Upper Bound",
                "type": "integer",
                "description": "Explicit upper bound value to rescale the image at. Needs to be an integer, e.g. 2000. You can only specify percentiles or bounds, not both."
              }
            },
            "title": "CellposeCustomNormalizer",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "level": {
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose `0` to process at full resolution."
          },
          "channel": {
            "$ref": "#/$defs/CellposeChannel1InputModel",
            "title": "Channel",
            "description": "Primary channel for pixel classification; requires either `wavelength_id` (e.g. `A01_C01`) or `label` (e.g. `DAPI`)."
          },
          "channel2": {
            "$ref": "#/$defs/CellposeChannel2InputModel",
            "title": "Channel2",
            "description": "Second channel for pixel classification (in the same format as `channel`). Use only if second channel has also been used during Ilastik model training."
          },
          "input_ROI_table": {
            "default": "FOV_ROI_table",
            "title": "Input Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply Cellpose segmentation. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_ROI_table": {
            "title": "Output Roi Table",
            "type": "string",
            "description": "If provided, a ROI table with that name is created, which will contain the bounding boxes of the newly segmented labels. ROI tables should have `ROI` in their name."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image (e.g. `\"embryo\"`)."
          },
          "use_masks": {
            "default": true,
            "title": "Use Masks",
            "type": "boolean",
            "description": "If `True`, try to use masked loading and fall back to `use_masks=False` if the ROI table is not suitable. Masked loading is relevant when only a subset of the bounding box should actually be processed (e.g. running within `emb_ROI_table`)."
          },
          "ilastik_model": {
            "title": "Ilastik Model",
            "type": "string",
            "description": "Path to the Ilastik model (e.g. `\"somemodel.ilp\"`)."
          },
          "foreground_class": {
            "default": 0,
            "title": "Foreground Class",
            "type": "integer",
            "description": "Class to be considered as foreground during prediction thresholding."
          },
          "threshold": {
            "default": 0.5,
            "title": "Threshold",
            "type": "number",
            "description": "Probabiltiy threshold for the Ilastik model."
          },
          "min_size": {
            "default": 15,
            "title": "Min Size",
            "type": "integer",
            "description": "Minimum size of the segmented objects (in pixels)."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_url",
          "level",
          "channel",
          "ilastik_model"
        ],
        "type": "object",
        "title": "IlastikPixelClassificationSegmentation"
      },
      "docs_link": "https://github.com/fractal-analytics-platform/fractal-ilastik-tasks"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Lorenzo Cerrone"
}
