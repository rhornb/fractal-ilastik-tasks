{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Ilastik Pixel Classification Segmentation",
      "category": "Segmentation",
      "tags": [
        "Pixel Classifier"
      ],
      "docs_info": "### Purpose\n\nThis task is used to apply a ilastik pixel classifier to an image.\n\n### Outputs\n\n- The `ilastik_pixel_classification_segmentation`: Generates a new label image named `output_label_name`.\n\n### Limitations\n\n- The task can only be used with single and dual channels pixel classifiers models.",
      "type": "parallel",
      "executable_parallel": "ilastik_pixel_classification_segmentation.py",
      "meta_parallel": {
        "cpus_per_task": 8,
        "mem": 8000
      },
      "args_schema_parallel": {
        "$defs": {
          "IlastikChannel1InputModel": {
            "description": "Channel input for ilastik.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "IlastikChannel1InputModel",
            "type": "object"
          },
          "IlastikChannel2InputModel": {
            "description": "Channel input for secondary ilastik channel.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "IlastikChannel2InputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "level": {
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose `0` to process at full resolution."
          },
          "channel": {
            "$ref": "#/$defs/IlastikChannel1InputModel",
            "title": "Channel",
            "description": "Primary channel for pixel classification; requires either `wavelength_id` (e.g. `A01_C01`) or `label` (e.g. `DAPI`)."
          },
          "channel2": {
            "$ref": "#/$defs/IlastikChannel2InputModel",
            "title": "Channel2",
            "description": "Second channel for pixel classification (in the same format as `channel`). Use only if second channel has also been used during Ilastik model training."
          },
          "input_ROI_table": {
            "default": "FOV_ROI_table",
            "title": "Input Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply Cellpose segmentation. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_ROI_table": {
            "title": "Output Roi Table",
            "type": "string",
            "description": "If provided, a ROI table with that name is created, which will contain the bounding boxes of the newly segmented labels. ROI tables should have `ROI` in their name."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image (e.g. `\"embryo\"`)."
          },
          "use_masks": {
            "default": true,
            "title": "Use Masks",
            "type": "boolean",
            "description": "If `True`, try to use masked loading and fall back to `use_masks=False` if the ROI table is not suitable. Masked loading is relevant when only a subset of the bounding box should actually be processed (e.g. running within `emb_ROI_table`)."
          },
          "ilastik_model": {
            "title": "Ilastik Model",
            "type": "string",
            "description": "Path to the Ilastik model (e.g. `\"somemodel.ilp\"`)."
          },
          "relabeling": {
            "default": true,
            "title": "Relabeling",
            "type": "boolean",
            "description": "If `True`, apply relabeling so that label values are unique for all objects in the well."
          },
          "foreground_class": {
            "default": 0,
            "title": "Foreground Class",
            "type": "integer",
            "description": "Class to be considered as foreground during prediction thresholding."
          },
          "threshold": {
            "default": 0.5,
            "title": "Threshold",
            "type": "number",
            "description": "Probabiltiy threshold for the Ilastik model."
          },
          "min_size": {
            "default": 15,
            "title": "Min Size",
            "type": "integer",
            "description": "Minimum size of the segmented objects (in pixels)."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_url",
          "level",
          "channel",
          "ilastik_model"
        ],
        "type": "object",
        "title": "IlastikPixelClassificationSegmentation"
      },
      "docs_link": "https://github.com/fractal-analytics-platform/fractal-ilastik-tasks"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Lorenzo Cerrone"
}
